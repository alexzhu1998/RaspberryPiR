// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// DHT11_writeMemory
void DHT11_writeMemory(Rcpp::NumericVector pin, Rcpp::IntegerVector length, Rcpp::IntegerVector timeDelay);
RcppExport SEXP _RaspberryPiR_DHT11_writeMemory(SEXP pinSEXP, SEXP lengthSEXP, SEXP timeDelaySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type timeDelay(timeDelaySEXP);
    DHT11_writeMemory(pin, length, timeDelay);
    return R_NilValue;
END_RCPP
}
// DHT11_readMemory
Rcpp::List DHT11_readMemory(Rcpp::NumericVector n);
RcppExport SEXP _RaspberryPiR_DHT11_readMemory(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(DHT11_readMemory(n));
    return rcpp_result_gen;
END_RCPP
}
// DHT11_freeMemory
void DHT11_freeMemory();
RcppExport SEXP _RaspberryPiR_DHT11_freeMemory() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    DHT11_freeMemory();
    return R_NilValue;
END_RCPP
}
// PhotoRes_writeMemory
void PhotoRes_writeMemory(Rcpp::NumericVector pin, Rcpp::IntegerVector length, Rcpp::IntegerVector timeDelay);
RcppExport SEXP _RaspberryPiR_PhotoRes_writeMemory(SEXP pinSEXP, SEXP lengthSEXP, SEXP timeDelaySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type timeDelay(timeDelaySEXP);
    PhotoRes_writeMemory(pin, length, timeDelay);
    return R_NilValue;
END_RCPP
}
// PhotoRes_readMemory
Rcpp::List PhotoRes_readMemory(Rcpp::NumericVector n);
RcppExport SEXP _RaspberryPiR_PhotoRes_readMemory(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(PhotoRes_readMemory(n));
    return rcpp_result_gen;
END_RCPP
}
// PhotoRes_freeMemory
void PhotoRes_freeMemory();
RcppExport SEXP _RaspberryPiR_PhotoRes_freeMemory() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    PhotoRes_freeMemory();
    return R_NilValue;
END_RCPP
}
// testing_writeMemory
void testing_writeMemory();
RcppExport SEXP _RaspberryPiR_testing_writeMemory() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testing_writeMemory();
    return R_NilValue;
END_RCPP
}
// testing_readMemory
Rcpp::List testing_readMemory();
RcppExport SEXP _RaspberryPiR_testing_readMemory() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(testing_readMemory());
    return rcpp_result_gen;
END_RCPP
}
// testing_freeMemory
void testing_freeMemory();
RcppExport SEXP _RaspberryPiR_testing_freeMemory() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testing_freeMemory();
    return R_NilValue;
END_RCPP
}
// testingDHT
Rcpp::List testingDHT(Rcpp::NumericVector pin);
RcppExport SEXP _RaspberryPiR_testingDHT(SEXP pinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pin(pinSEXP);
    rcpp_result_gen = Rcpp::wrap(testingDHT(pin));
    return rcpp_result_gen;
END_RCPP
}
// testingPhotoRes
Rcpp::List testingPhotoRes(Rcpp::NumericVector pin);
RcppExport SEXP _RaspberryPiR_testingPhotoRes(SEXP pinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pin(pinSEXP);
    rcpp_result_gen = Rcpp::wrap(testingPhotoRes(pin));
    return rcpp_result_gen;
END_RCPP
}
// testingMQ2
Rcpp::List testingMQ2(Rcpp::NumericVector pin, Rcpp::NumericVector SPICLK, Rcpp::NumericVector SPIMISO, Rcpp::NumericVector SPIMOSI, Rcpp::NumericVector SPICS, Rcpp::NumericVector mq2_dpin, Rcpp::NumericVector mq2_apin);
RcppExport SEXP _RaspberryPiR_testingMQ2(SEXP pinSEXP, SEXP SPICLKSEXP, SEXP SPIMISOSEXP, SEXP SPIMOSISEXP, SEXP SPICSSEXP, SEXP mq2_dpinSEXP, SEXP mq2_apinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type SPICLK(SPICLKSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type SPIMISO(SPIMISOSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type SPIMOSI(SPIMOSISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type SPICS(SPICSSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mq2_dpin(mq2_dpinSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mq2_apin(mq2_apinSEXP);
    rcpp_result_gen = Rcpp::wrap(testingMQ2(pin, SPICLK, SPIMISO, SPIMOSI, SPICS, mq2_dpin, mq2_apin));
    return rcpp_result_gen;
END_RCPP
}
// simpleCapture
Rcpp::List simpleCapture(Rcpp::CharacterVector path, Rcpp::NumericVector width, Rcpp::NumericVector height);
RcppExport SEXP _RaspberryPiR_simpleCapture(SEXP pathSEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type path(pathSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type width(widthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(simpleCapture(path, width, height));
    return rcpp_result_gen;
END_RCPP
}
// LL_wiringPiSetup
void LL_wiringPiSetup();
RcppExport SEXP _RaspberryPiR_LL_wiringPiSetup() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    LL_wiringPiSetup();
    return R_NilValue;
END_RCPP
}
// LL_pinMode
void LL_pinMode(Rcpp::IntegerVector pin, Rcpp::StringVector mode);
RcppExport SEXP _RaspberryPiR_LL_pinMode(SEXP pinSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type mode(modeSEXP);
    LL_pinMode(pin, mode);
    return R_NilValue;
END_RCPP
}
// LL_digitalWrite
void LL_digitalWrite(Rcpp::IntegerVector pin, Rcpp::LogicalVector mode);
RcppExport SEXP _RaspberryPiR_LL_digitalWrite(SEXP pinSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type mode(modeSEXP);
    LL_digitalWrite(pin, mode);
    return R_NilValue;
END_RCPP
}
// LL_digitalRead
Rcpp::IntegerVector LL_digitalRead(Rcpp::IntegerVector pin);
RcppExport SEXP _RaspberryPiR_LL_digitalRead(SEXP pinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pin(pinSEXP);
    rcpp_result_gen = Rcpp::wrap(LL_digitalRead(pin));
    return rcpp_result_gen;
END_RCPP
}
// LL_pullUpDnControl
void LL_pullUpDnControl(Rcpp::IntegerVector pin, Rcpp::StringVector pud);
RcppExport SEXP _RaspberryPiR_LL_pullUpDnControl(SEXP pinSEXP, SEXP pudSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type pud(pudSEXP);
    LL_pullUpDnControl(pin, pud);
    return R_NilValue;
END_RCPP
}
// LL_millis
Rcpp::NumericVector LL_millis();
RcppExport SEXP _RaspberryPiR_LL_millis() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(LL_millis());
    return rcpp_result_gen;
END_RCPP
}
// LL_micros
Rcpp::NumericVector LL_micros();
RcppExport SEXP _RaspberryPiR_LL_micros() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(LL_micros());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RaspberryPiR_DHT11_writeMemory", (DL_FUNC) &_RaspberryPiR_DHT11_writeMemory, 3},
    {"_RaspberryPiR_DHT11_readMemory", (DL_FUNC) &_RaspberryPiR_DHT11_readMemory, 1},
    {"_RaspberryPiR_DHT11_freeMemory", (DL_FUNC) &_RaspberryPiR_DHT11_freeMemory, 0},
    {"_RaspberryPiR_PhotoRes_writeMemory", (DL_FUNC) &_RaspberryPiR_PhotoRes_writeMemory, 3},
    {"_RaspberryPiR_PhotoRes_readMemory", (DL_FUNC) &_RaspberryPiR_PhotoRes_readMemory, 1},
    {"_RaspberryPiR_PhotoRes_freeMemory", (DL_FUNC) &_RaspberryPiR_PhotoRes_freeMemory, 0},
    {"_RaspberryPiR_testing_writeMemory", (DL_FUNC) &_RaspberryPiR_testing_writeMemory, 0},
    {"_RaspberryPiR_testing_readMemory", (DL_FUNC) &_RaspberryPiR_testing_readMemory, 0},
    {"_RaspberryPiR_testing_freeMemory", (DL_FUNC) &_RaspberryPiR_testing_freeMemory, 0},
    {"_RaspberryPiR_testingDHT", (DL_FUNC) &_RaspberryPiR_testingDHT, 1},
    {"_RaspberryPiR_testingPhotoRes", (DL_FUNC) &_RaspberryPiR_testingPhotoRes, 1},
    {"_RaspberryPiR_testingMQ2", (DL_FUNC) &_RaspberryPiR_testingMQ2, 7},
    {"_RaspberryPiR_simpleCapture", (DL_FUNC) &_RaspberryPiR_simpleCapture, 3},
    {"_RaspberryPiR_LL_wiringPiSetup", (DL_FUNC) &_RaspberryPiR_LL_wiringPiSetup, 0},
    {"_RaspberryPiR_LL_pinMode", (DL_FUNC) &_RaspberryPiR_LL_pinMode, 2},
    {"_RaspberryPiR_LL_digitalWrite", (DL_FUNC) &_RaspberryPiR_LL_digitalWrite, 2},
    {"_RaspberryPiR_LL_digitalRead", (DL_FUNC) &_RaspberryPiR_LL_digitalRead, 1},
    {"_RaspberryPiR_LL_pullUpDnControl", (DL_FUNC) &_RaspberryPiR_LL_pullUpDnControl, 2},
    {"_RaspberryPiR_LL_millis", (DL_FUNC) &_RaspberryPiR_LL_millis, 0},
    {"_RaspberryPiR_LL_micros", (DL_FUNC) &_RaspberryPiR_LL_micros, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RaspberryPiR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
